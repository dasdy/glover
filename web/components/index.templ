package components

import "fmt"

// getLinkForPosition returns the appropriate URL based on the page type
func getLinkForPosition(position int, pageType PageType) string {
	switch pageType {
	case PageTypeCombo:
		return fmt.Sprintf("/combo?position=%d", position)
	case PageTypeNeighbors:
		return fmt.Sprintf("/neighbors?position=%d", position)
	case PageTypeStats:
		return fmt.Sprintf("/stats?position=%d", position)
	default:
		return fmt.Sprintf("/stats?position=%d", position)
	}
}

// getSwitchModeLink returns the appropriate URL to switch between combo and neighbors modes
func getSwitchModeLink(position int, currentPageType PageType) string {
	switch currentPageType {
	case PageTypeCombo:
		return fmt.Sprintf("/neighbors?position=%d", position)
	case PageTypeNeighbors:
		return fmt.Sprintf("/combo?position=%d", position)
	default:
		return "/"
	}
}

// getSwitchModeButtonText returns the appropriate button text for switching modes
func getSwitchModeButtonText(currentPageType PageType) string {
	switch currentPageType {
	case PageTypeCombo:
		return "View Neighbors"
	case PageTypeNeighbors:
		return "View Combos"
	default:
		return ""
	}
}

templ HeatMap(c *RenderContext) {
    <html>
        <head>
            <meta charset="UTF-8"/>
            <meta http-equiv="refresh" content="600"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>Glove80 Key Heatmap</title>
            <link rel="stylesheet" href="/assets/css/styles.css"/>
            <link rel="stylesheet" href="/assets/css/tailwind_output.css"/>
        </head>
        <body
            class="bg-theme-2"
        >
            <div class="items-center justify-center flex flex-col ">
                <h1 class="text-xl mt-10"><a href="/">Home</a></h1>
                @switchMode(c)
                @keyboardSvg(c)
                @slider(fmt.Sprintf("%d", c.MaxVal))
            </div>
            <script src="/assets/js/colorize.js"></script>
			<script>
				var slider = document.getElementById("colorClipRange");
				var output = document.getElementById("colorClipSpan");

				// Update the current slider value (each time you drag the slider handle)
				slider.oninput = function () {
					output.innerHTML = this.value;
					colorize(this.value)
				}
				slider.oninput()
			</script>
	</body>
    </html>
}

templ switchMode(c *RenderContext) {
    if c.Page == PageTypeCombo || c.Page == PageTypeNeighbors {
        // Find the first highlighted item to get its position for the toggle link
        {{
            var highlightedPosition int
            for _, item := range c.Items {
                if item.Highlight {
                    highlightedPosition = item.Position
                    break
                }
            }
        }}
        <div class="mb-4">
            <a href={ templ.SafeURL(getSwitchModeLink(highlightedPosition, c.Page)) } 
                class="px-4 py-2 bg-theme-5 text-white rounded hover:bg-indigo-700 transition duration-200">
                { getSwitchModeButtonText(c.Page) }
            </a>
        </div>
    }
}

// New SVG keyboard template
templ keyboardSvg(c *RenderContext) {
    <svg id="keysgrid" class="mt-4" width="960" height="640" viewBox="0 0 960 640">
        <g>
            for _, item := range c.Items {
                @svgKey(&item, c)
            }
        </g>
    </svg>
}

// SVG key element
templ svgKey(item *Item, c *RenderContext) {
        // Use Row and Col directly for positioning
        // Each key is 70x70 with 10px gap
        <g transform={ fmt.Sprintf("translate(%d, %d)", item.Col*80, item.Row*80) }>
            <a href={ templ.SafeURL(getLinkForPosition(item.Position, c.Page)) }>
                if !item.Highlight {
                    <rect 
                        width="70" 
                        height="70" 
                        rx="5" 
                        class="key-rect" 
                        data-position={ fmt.Sprintf("%d", item.Position) }
                        data-presses={ fmt.Sprintf("%s", item.KeypressAmount) }
                        fill="#e5e7eb" 
                        stroke="#a1a1aa"
                    ></rect>
                } else {
                    <rect 
                        width="70" 
                        height="70" 
                        rx="5"
                        class="key-rect"
                        data-position={ fmt.Sprintf("%d", item.Position) }
                        data-presses={ fmt.Sprintf("%s", item.KeypressAmount) }
                        fill="#e5e7eb"
                        stroke="#6366f1"
                        stroke-width="4"
                    ></rect>
                }
                <text
                    id={ fmt.Sprintf("key-msg-%d", item.Position) }
                    x="5" 
                    y="15" 
                    class="text-s"
                    font-size="12"
                >{ item.KeyName }</text>
                <text
                    id={ fmt.Sprintf("keys-pressed-%d", item.Position) }
                    class="keys-pressed"
                    x="35" 
                    y="40" 
                    text-anchor="middle"
                    font-size="14"
                    font-weight="600"
                >{ item.KeypressAmount }</text>
            </a>
        </g>
}

templ slider(maxVal string) {
	<div class="slidecontainer flex w-6/12 flex-row">
		<label for="colorClipRange" class="mr-1 content-center align-middle">Color Clipping at:</label>
		<input
			type="range"
			min="1"
			max={ maxVal }
			value={ maxVal }
			class="slider mt-1 h-12 w-9/12"
			step="10"
			id="colorClipRange"
		/>
		<span id="colorClipSpan" class="ml-1 content-center align-middle">{ maxVal }</span>
	</div>
}
