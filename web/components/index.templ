package components

import "fmt"

templ HeatMap(c *RenderContext) {
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta http-equiv="refresh" content="600"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Glove80 Key Heatmap</title>
			<link rel="stylesheet" href="/assets/css/styles.css"/>
			<link rel="stylesheet" href="/assets/css/tailwind_output.css"/>
		</head>
		<body
			class="bg-theme-2"
		>
			<div class="items-center justify-center flex flex-col ">
				<h1 class="text-xl mt-10"><a href="/">Home</a></h1>
				<div id="keysgrid" class="mt-4 inline-grid grid-cols-12 gap-1">
					for _, item := range c.Items {
						@key(&item)
					}
				</div>
				@slider(fmt.Sprintf("%d", c.MaxVal))
			</div>
			<script src="/assets/js/colorize.js"></script>
			<script>
        var slider = document.getElementById("colorClipRange");
        var output = document.getElementById("colorClipSpan");

        // Update the current slider value (each time you drag the slider handle)
        slider.oninput = function () {
            output.innerHTML = this.value;
            colorize(this.value)
        }
        slider.oninput()
    </script>
		</body>
	</html>
}

templ keyContent(item *Item) {
	<span id={ fmt.Sprintf("key-msg-%d", item.Position) } class="text-s absolute top-0 left-1">{ item.KeyName } </span>
	<span
		id={ fmt.Sprintf("keys-pressed-%d", item.Position) }
		class="keys-pressed font-semibold inline-block min-w-9 text-center"
	>
		{ item.KeypressAmount }
	</span>
}

templ key(item *Item) {
	<a href={ templ.URL(fmt.Sprintf("/combo?position=%d", item.Position)) }>
		<div class="aspect-square">
			if item.Visible {
				if !item.Highlight {
					<div class="grid-item flex h-full w-full flex-col items-center justify-center rounded-md border relative border-solid border-theme-3 p-4">
						@keyContent(item)
					</div>
				} else {
					<div class="grid-item flex h-full w-full flex-col items-center justify-center rounded-md border-4 relative border-solid border-theme-4 p-4">
						@keyContent(item)
					</div>
				}
			} else {
				<div class="grid-item-hidden"></div>
			}
		</div>
	</a>
}

templ slider(maxVal string) {
	<div class="slidecontainer flex w-6/12 flex-row">
		<label for="colorClipRange" class="mr-1 content-center align-middle">Color Clipping at:</label>
		<input
			type="range"
			min="1"
			max={ maxVal }
			value={ maxVal }
			class="slider mt-1 h-12 w-9/12"
			step="10"
			id="colorClipRange"
		/>
		<span id="colorClipSpan" class="ml-1 content-center align-middle">{ maxVal }</span>
	</div>
}
